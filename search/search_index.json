{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Retro Game Engine","text":"<p>A modern Python game engine built with Pygame, designed for creating retro-style 2D games.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Modern Game Loop: Fixed and variable timestep updates</li> <li>Entity Component System: Flexible and efficient game object management</li> <li>Scene Management: Easy state transitions and game flow control</li> <li>Input System: Keyboard and gamepad support with action mapping</li> <li>Physics System: 2D collision detection and resolution</li> <li>Audio System: Sound effects and music playback</li> <li>Sprite System: Animation and rendering utilities</li> <li>Tilemap Support: Efficient tile-based level design</li> <li>UI System: Buttons, text, and other UI elements</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code># Install the engine\npip install retro-game-engine\n\n# Create a simple game\nfrom retro_game_engine import Game, Scene\n\nclass MyGame(Scene):\n    def update(self, dt: float):\n        # Update game logic\n        pass\n\n    def render(self):\n        # Render game objects\n        pass\n\ngame = Game()\ngame.run(MyGame())\n</code></pre>"},{"location":"#example-games","title":"Example Games","text":"<p>Check out our example games to see what you can build:</p> <ul> <li>Platformer: A simple platformer game</li> <li>More examples coming soon!</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide: Get up and running</li> <li>Tutorials: Learn through examples</li> <li>API Reference: Detailed documentation</li> </ul>"},{"location":"#community","title":"Community","text":"<ul> <li>GitHub Issues: Report bugs or request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide to get started.</p>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing the Retro Game Engine, ensure you have:</p> <ul> <li>Python 3.11 or higher</li> <li>pip (Python package installer)</li> <li>Poetry (optional, for development)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<pre><code>pip install retro-game-engine\n</code></pre>"},{"location":"installation/#using-poetry-for-development","title":"Using Poetry (For Development)","text":"<ol> <li> <p>Install Poetry if you haven't already: <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></p> </li> <li> <p>Clone the repository: <pre><code>git clone https://github.com/ahmed5145/retro_game_engine.git\ncd retro_game_engine\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>poetry install\n</code></pre></p> </li> </ol>"},{"location":"installation/#platform-specific-instructions","title":"Platform-Specific Instructions","text":""},{"location":"installation/#windows","title":"Windows","text":"<ol> <li>Install Python from python.org</li> <li>Ensure Python is added to PATH during installation</li> <li>Open Command Prompt and run: <pre><code>pip install retro-game-engine\n</code></pre></li> </ol>"},{"location":"installation/#macos","title":"macOS","text":"<ol> <li> <p>Install Python using Homebrew: <pre><code>brew install python@3.11\n</code></pre></p> </li> <li> <p>Install the engine: <pre><code>pip3 install retro-game-engine\n</code></pre></p> </li> </ol>"},{"location":"installation/#linux","title":"Linux","text":"<ol> <li> <p>Install Python and dependencies: <pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3.11 python3-pip python3-venv\n\n# Fedora\nsudo dnf install python3.11 python3-pip\n</code></pre></p> </li> <li> <p>Install the engine: <pre><code>pip3 install retro-game-engine\n</code></pre></p> </li> </ol>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>Test your installation by running:</p> <pre><code>from retro_game_engine import Game\n\nprint(Game.__version__)\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-issues","title":"Common Issues","text":"<ol> <li>ImportError: No module named 'pygame'</li> <li> <p>Solution: <code>pip install pygame</code></p> </li> <li> <p>Version conflicts</p> </li> <li> <p>Solution: Use a virtual environment:      <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install retro-game-engine\n</code></pre></p> </li> <li> <p>Permission errors</p> </li> <li>Solution: Use <code>--user</code> flag:      <pre><code>pip install --user retro-game-engine\n</code></pre></li> </ol>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<ul> <li>Check out our Quick Start Guide</li> <li>Try the Tutorials</li> <li>Explore Examples</li> </ul>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#core-components","title":"Core Components","text":""},{"location":"api/#window-management","title":"Window Management","text":"<ul> <li>Window - Window creation and management</li> <li>WindowConfig - Window configuration options</li> </ul>"},{"location":"api/#game-loop","title":"Game Loop","text":"<ul> <li>GameLoop - Main game loop implementation</li> <li>GameLoopConfig - Game loop configuration</li> <li>PerformanceMetrics - Performance monitoring</li> </ul>"},{"location":"api/#sprites-and-graphics","title":"Sprites and Graphics","text":"<ul> <li>Sprite - Sprite rendering and management</li> <li>SpriteSheet - Sprite sheet handling</li> <li>SpriteConfig - Sprite configuration</li> <li>SpriteRenderer - Efficient sprite rendering system</li> </ul>"},{"location":"api/#input-handling","title":"Input Handling","text":"<ul> <li>InputManager - Input management system</li> <li>InputAction - Input action configuration</li> <li>InputBinding - Key binding system</li> </ul>"},{"location":"api/#audio-system","title":"Audio System","text":"<ul> <li>AudioManager - Audio playback and management</li> <li>AudioClip - Sound effect and music handling</li> <li>AudioConfig - Audio configuration options</li> </ul>"},{"location":"api/#entity-component-system","title":"Entity Component System","text":"<ul> <li>Entity - Base entity class</li> <li>Component - Component base class</li> <li>World - ECS world management</li> </ul>"},{"location":"api/#scene-management","title":"Scene Management","text":"<ul> <li>Scene - Scene management</li> <li>SceneManager - Scene switching and stacking</li> </ul>"},{"location":"api/#physics","title":"Physics","text":"<ul> <li>PhysicsBody - Physics simulation</li> <li>PhysicsConfig - Physics configuration</li> <li>Vector2D - 2D vector operations</li> </ul>"},{"location":"api/#tilemap-system","title":"Tilemap System","text":"<ul> <li>Tilemap - Tilemap management</li> <li>TileConfig - Tile configuration</li> <li>TileLayerConfig - Layer configuration</li> </ul>"},{"location":"api/#ui-system","title":"UI System","text":"<ul> <li>UIElement - Base UI element</li> <li>Button - Button implementation</li> <li>Text - Text rendering</li> <li>UIRect - UI positioning</li> </ul>"},{"location":"api/#examples","title":"Examples","text":"<p>See the examples directory for practical usage examples of these components.</p>"},{"location":"api/core/","title":"Core API Reference","text":""},{"location":"api/core/#gameloop","title":"GameLoop","text":"<p>The main game loop class that manages the game's execution.</p>"},{"location":"api/core/#properties","title":"Properties","text":"Property Type Description window_title str The title of the game window window_width int The width of the game window in pixels window_height int The height of the game window in pixels current_scene Scene The currently active scene target_fps int Target frames per second (default: 60) is_running bool Whether the game loop is running"},{"location":"api/core/#methods","title":"Methods","text":""},{"location":"api/core/#__init__self-none","title":"<code>__init__(self) -&gt; None</code>","text":"<p>Initializes a new game loop instance.</p>"},{"location":"api/core/#runself-none","title":"<code>run(self) -&gt; None</code>","text":"<p>Starts the game loop. This method blocks until the game is closed.</p>"},{"location":"api/core/#stopself-none","title":"<code>stop(self) -&gt; None</code>","text":"<p>Stops the game loop.</p>"},{"location":"api/core/#change_sceneself-scene-scene-none","title":"<code>change_scene(self, scene: Scene) -&gt; None</code>","text":"<p>Changes the current scene to the specified scene.</p>"},{"location":"api/core/#scene","title":"Scene","text":"<p>Base class for game scenes.</p>"},{"location":"api/core/#methods_1","title":"Methods","text":""},{"location":"api/core/#__init__self-none_1","title":"<code>__init__(self) -&gt; None</code>","text":"<p>Initializes a new scene instance.</p>"},{"location":"api/core/#updateself-delta_time-float-none","title":"<code>update(self, delta_time: float) -&gt; None</code>","text":"<p>Updates the scene's logic. Called every frame.</p> <p>Parameters: - <code>delta_time</code>: Time elapsed since last frame in seconds</p>"},{"location":"api/core/#drawself-surface-pygamesurface-none","title":"<code>draw(self, surface: pygame.Surface) -&gt; None</code>","text":"<p>Draws the scene. Called every frame after update.</p> <p>Parameters: - <code>surface</code>: The surface to draw on</p>"},{"location":"api/core/#on_enterself-none","title":"<code>on_enter(self) -&gt; None</code>","text":"<p>Called when the scene becomes active.</p>"},{"location":"api/core/#on_exitself-none","title":"<code>on_exit(self) -&gt; None</code>","text":"<p>Called when the scene is being exited.</p>"},{"location":"api/core/#sprite","title":"Sprite","text":"<p>Class for handling sprite rendering and animation.</p>"},{"location":"api/core/#properties_1","title":"Properties","text":"Property Type Description config SpriteConfig Configuration for position, scale, rotation, etc. texture pygame.Surface The sprite's texture frames List[SpriteFrame] List of animation frames current_frame int Index of current animation frame"},{"location":"api/core/#methods_2","title":"Methods","text":""},{"location":"api/core/#__init__self-texture_path-str-none","title":"<code>__init__(self, texture_path: str) -&gt; None</code>","text":"<p>Initializes a new sprite instance.</p> <p>Parameters: - <code>texture_path</code>: Path to the sprite's texture file</p>"},{"location":"api/core/#drawself-surface-pygamesurface-none_1","title":"<code>draw(self, surface: pygame.Surface) -&gt; None</code>","text":"<p>Draws the sprite on the given surface.</p> <p>Parameters: - <code>surface</code>: The surface to draw on</p>"},{"location":"api/core/#updateself-delta_time-float-none_1","title":"<code>update(self, delta_time: float) -&gt; None</code>","text":"<p>Updates the sprite's animation state.</p> <p>Parameters: - <code>delta_time</code>: Time elapsed since last frame in seconds</p>"},{"location":"api/core/#add_frameself-frame-spriteframe-none","title":"<code>add_frame(self, frame: SpriteFrame) -&gt; None</code>","text":"<p>Adds an animation frame to the sprite.</p> <p>Parameters: - <code>frame</code>: The frame to add</p>"},{"location":"api/core/#play_animationself-speed-float-10-loop-bool-true-none","title":"<code>play_animation(self, speed: float = 1.0, loop: bool = True) -&gt; None</code>","text":"<p>Starts playing the sprite's animation.</p> <p>Parameters: - <code>speed</code>: Animation playback speed multiplier - <code>loop</code>: Whether to loop the animation</p>"},{"location":"api/core/#input","title":"Input","text":"<p>Static class for handling input.</p>"},{"location":"api/core/#methods_3","title":"Methods","text":""},{"location":"api/core/#staticmethod-is_key_pressedkey-int-bool","title":"<code>@staticmethod is_key_pressed(key: int) -&gt; bool</code>","text":"<p>Checks if a key is currently pressed.</p> <p>Parameters: - <code>key</code>: Pygame key constant</p> <p>Returns: - <code>bool</code>: True if the key is pressed</p>"},{"location":"api/core/#staticmethod-is_mouse_button_pressedbutton-int-bool","title":"<code>@staticmethod is_mouse_button_pressed(button: int) -&gt; bool</code>","text":"<p>Checks if a mouse button is currently pressed.</p> <p>Parameters: - <code>button</code>: Mouse button index (1: left, 2: middle, 3: right)</p> <p>Returns: - <code>bool</code>: True if the button is pressed</p>"},{"location":"api/core/#staticmethod-get_mouse_position-tupleint-int","title":"<code>@staticmethod get_mouse_position() -&gt; Tuple[int, int]</code>","text":"<p>Gets the current mouse position.</p> <p>Returns: - <code>Tuple[int, int]</code>: (x, y) coordinates</p>"},{"location":"api/core/#physics","title":"Physics","text":"<p>Class for handling physics calculations.</p>"},{"location":"api/core/#methods_4","title":"Methods","text":""},{"location":"api/core/#staticmethod-check_collisionsprite1-sprite-sprite2-sprite-bool","title":"<code>@staticmethod check_collision(sprite1: Sprite, sprite2: Sprite) -&gt; bool</code>","text":"<p>Checks for collision between two sprites.</p> <p>Parameters: - <code>sprite1</code>: First sprite - <code>sprite2</code>: Second sprite</p> <p>Returns: - <code>bool</code>: True if sprites are colliding</p>"},{"location":"api/core/#staticmethod-apply_gravitysprite-sprite-gravity-float-delta_time-float-none","title":"<code>@staticmethod apply_gravity(sprite: Sprite, gravity: float, delta_time: float) -&gt; None</code>","text":"<p>Applies gravity to a sprite.</p> <p>Parameters: - <code>sprite</code>: The sprite to apply gravity to - <code>gravity</code>: Gravity strength - <code>delta_time</code>: Time elapsed since last frame</p>"},{"location":"api/core/#audio","title":"Audio","text":"<p>Class for handling audio playback.</p>"},{"location":"api/core/#methods_5","title":"Methods","text":""},{"location":"api/core/#staticmethod-play_soundsound_path-str-volume-float-10-none","title":"<code>@staticmethod play_sound(sound_path: str, volume: float = 1.0) -&gt; None</code>","text":"<p>Plays a sound effect.</p> <p>Parameters: - <code>sound_path</code>: Path to the sound file - <code>volume</code>: Volume level (0.0 to 1.0)</p>"},{"location":"api/core/#staticmethod-play_musicmusic_path-str-volume-float-10-loop-bool-true-none","title":"<code>@staticmethod play_music(music_path: str, volume: float = 1.0, loop: bool = True) -&gt; None</code>","text":"<p>Plays background music.</p> <p>Parameters: - <code>music_path</code>: Path to the music file - <code>volume</code>: Volume level (0.0 to 1.0) - <code>loop</code>: Whether to loop the music</p>"},{"location":"api/core/#staticmethod-stop_music-none","title":"<code>@staticmethod stop_music() -&gt; None</code>","text":"<p>Stops currently playing music.</p>"},{"location":"api/core/#ui","title":"UI","text":""},{"location":"api/core/#button","title":"Button","text":"<p>Class for creating interactive buttons.</p>"},{"location":"api/core/#properties_2","title":"Properties","text":"Property Type Description text str The button's text position Tuple[int, int] Button position (x, y) size Tuple[int, int] Button size (width, height) is_hovered bool Whether the mouse is hovering over the button is_pressed bool Whether the button is being pressed"},{"location":"api/core/#methods_6","title":"Methods","text":""},{"location":"api/core/#__init__self-text-str-position-tupleint-int-size-tupleint-int-none","title":"<code>__init__(self, text: str, position: Tuple[int, int], size: Tuple[int, int]) -&gt; None</code>","text":"<p>Initializes a new button instance.</p>"},{"location":"api/core/#updateself-none","title":"<code>update(self) -&gt; None</code>","text":"<p>Updates the button's state based on input.</p>"},{"location":"api/core/#drawself-surface-pygamesurface-none_2","title":"<code>draw(self, surface: pygame.Surface) -&gt; None</code>","text":"<p>Draws the button on the given surface.</p>"},{"location":"api/core/#on_clickself-callback-callable-none-none","title":"<code>on_click(self, callback: Callable[[], None]) -&gt; None</code>","text":"<p>Sets the button's click callback function.</p>"},{"location":"api/game_loop/","title":"Game Loop","text":"<p>The game loop is the core component that drives your game's execution. It manages the timing of updates and rendering, ensuring consistent gameplay regardless of the system's performance.</p>"},{"location":"api/game_loop/#gameloop","title":"GameLoop","text":"<pre><code>class GameLoop:\n    def __init__(\n        self,\n        update_func: Callable[[float], None],\n        render_func: Callable[[], None],\n        config: Optional[GameLoopConfig] = None\n    ) -&gt; None\n</code></pre>"},{"location":"api/game_loop/#parameters","title":"Parameters","text":"<ul> <li><code>update_func</code>: Function called each frame to update game state. Takes delta time in seconds.</li> <li><code>render_func</code>: Function called each frame to render the game.</li> <li><code>config</code>: Optional configuration for the game loop.</li> </ul>"},{"location":"api/game_loop/#methods","title":"Methods","text":""},{"location":"api/game_loop/#run","title":"run()","text":"<p><pre><code>def run(self) -&gt; None\n</code></pre> Start the game loop. This will run until <code>stop()</code> is called.</p>"},{"location":"api/game_loop/#stop","title":"stop()","text":"<p><pre><code>def stop(self) -&gt; None\n</code></pre> Stop the game loop.</p>"},{"location":"api/game_loop/#run_one_frame","title":"run_one_frame()","text":"<p><pre><code>def run_one_frame(self) -&gt; None\n</code></pre> Process a single frame of the game loop.</p>"},{"location":"api/game_loop/#properties","title":"Properties","text":""},{"location":"api/game_loop/#average_fps","title":"average_fps","text":"<p><pre><code>@property\ndef average_fps(self) -&gt; float\n</code></pre> Get the current average FPS over the last <code>fps_sample_size</code> frames.</p>"},{"location":"api/game_loop/#running","title":"running","text":"<p><pre><code>@property\ndef running(self) -&gt; bool\n</code></pre> Check if the game loop is currently running.</p>"},{"location":"api/game_loop/#gameloopconfig","title":"GameLoopConfig","text":"<p>Configuration options for the game loop.</p> <pre><code>@dataclass\nclass GameLoopConfig:\n    fps: int = 60\n    fixed_time_step: float = 1.0 / 60.0\n    max_frame_time: float = 0.25\n    fps_sample_size: int = 60\n</code></pre>"},{"location":"api/game_loop/#fields","title":"Fields","text":"<ul> <li><code>fps</code>: Target frames per second (default: 60)</li> <li><code>fixed_time_step</code>: Time step for physics/fixed updates (default: 1/60 second)</li> <li><code>max_frame_time</code>: Maximum time to process in a single frame (default: 0.25 seconds)</li> <li><code>fps_sample_size</code>: Number of frames to sample for FPS calculation (default: 60)</li> </ul>"},{"location":"api/game_loop/#performancemetrics","title":"PerformanceMetrics","text":"<p>Performance monitoring data for the game loop.</p> <pre><code>@dataclass\nclass PerformanceMetrics:\n    fps: float = 0.0\n    frame_time: float = 0.0\n    min_frame_time: float = float(\"inf\")\n    max_frame_time: float = 0.0\n    avg_frame_time: float = 0.0\n    fixed_update_time: float = 0.0\n    update_time: float = 0.0\n    render_time: float = 0.0\n    idle_time: float = 0.0\n</code></pre>"},{"location":"api/game_loop/#fields_1","title":"Fields","text":"<ul> <li><code>fps</code>: Current frames per second</li> <li><code>frame_time</code>: Time taken for the last frame</li> <li><code>min_frame_time</code>: Minimum frame time recorded</li> <li><code>max_frame_time</code>: Maximum frame time recorded</li> <li><code>avg_frame_time</code>: Average frame time</li> <li><code>fixed_update_time</code>: Time spent in fixed update</li> <li><code>update_time</code>: Time spent in update</li> <li><code>render_time</code>: Time spent rendering</li> <li><code>idle_time</code>: Time spent idle</li> </ul>"},{"location":"api/game_loop/#example-usage","title":"Example Usage","text":"<pre><code>from src.core.game_loop import GameLoop, GameLoopConfig\n\n# Create configuration\nconfig = GameLoopConfig(\n    fps=60,\n    fixed_time_step=1/60,\n    max_frame_time=0.25\n)\n\n# Define update and render functions\ndef update(dt: float) -&gt; None:\n    # Update game state\n    pass\n\ndef render() -&gt; None:\n    # Render game\n    pass\n\n# Create and run game loop\ngame_loop = GameLoop(update, render, config)\ngame_loop.run()\n</code></pre>"},{"location":"api/game_loop/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Fixed Time Step: Use the fixed time step for physics and gameplay logic that needs to be consistent.</p> </li> <li> <p>Frame Independent Movement: Always multiply movement by delta time: <pre><code>def update(dt: float) -&gt; None:\n    position.x += velocity.x * dt\n    position.y += velocity.y * dt\n</code></pre></p> </li> <li> <p>Performance Monitoring: Monitor the performance metrics to identify bottlenecks: <pre><code>def update(dt: float) -&gt; None:\n    if game_loop.average_fps &lt; 55:\n        # Reduce visual effects or complexity\n        pass\n</code></pre></p> </li> <li> <p>Maximum Frame Time: Set a reasonable <code>max_frame_time</code> to prevent the \"spiral of death\" when the game falls behind.</p> </li> </ol>"},{"location":"api/game_loop/#common-issues","title":"Common Issues","text":""},{"location":"api/game_loop/#low-fps","title":"Low FPS","text":"<ul> <li>Check for expensive operations in the update or render functions</li> <li>Consider using sprite batching</li> <li>Profile the game using the performance metrics</li> </ul>"},{"location":"api/game_loop/#inconsistent-physics","title":"Inconsistent Physics","text":"<ul> <li>Ensure physics calculations are done in the fixed time step</li> <li>Don't modify physics state directly in the render function</li> <li>Use interpolation for smooth rendering between physics updates</li> </ul>"},{"location":"api/game_loop/#high-cpu-usage","title":"High CPU Usage","text":"<ul> <li>Use frame limiting when appropriate</li> <li>Don't perform unnecessary calculations each frame</li> <li>Consider using spatial partitioning for large numbers of objects</li> </ul>"},{"location":"api/input/","title":"Input System","text":"<p>The input system provides a unified interface for handling keyboard, mouse, and gamepad input.</p>"},{"location":"api/input/#inputmanager","title":"InputManager","text":"<pre><code>class InputManager:\n    def __init__(self):\n        \"\"\"Initialize the input manager.\"\"\"\n</code></pre>"},{"location":"api/input/#methods","title":"Methods","text":""},{"location":"api/input/#update","title":"update()","text":"<p><pre><code>def update(self) -&gt; None\n</code></pre> Update input state for the current frame. Should be called once per frame.</p>"},{"location":"api/input/#is_key_pressed","title":"is_key_pressed()","text":"<p><pre><code>def is_key_pressed(self, key: int) -&gt; bool\n</code></pre> Check if a key is currently being held down.</p>"},{"location":"api/input/#is_key_just_pressed","title":"is_key_just_pressed()","text":"<p><pre><code>def is_key_just_pressed(self, key: int) -&gt; bool\n</code></pre> Check if a key was just pressed this frame.</p>"},{"location":"api/input/#is_key_just_released","title":"is_key_just_released()","text":"<p><pre><code>def is_key_just_released(self, key: int) -&gt; bool\n</code></pre> Check if a key was just released this frame.</p>"},{"location":"api/input/#get_mouse_position","title":"get_mouse_position()","text":"<p><pre><code>def get_mouse_position(self) -&gt; Tuple[int, int]\n</code></pre> Get the current mouse position as (x, y).</p>"},{"location":"api/input/#is_mouse_button_pressed","title":"is_mouse_button_pressed()","text":"<p><pre><code>def is_mouse_button_pressed(self, button: int) -&gt; bool\n</code></pre> Check if a mouse button is currently being held down.</p>"},{"location":"api/input/#is_mouse_button_just_pressed","title":"is_mouse_button_just_pressed()","text":"<p><pre><code>def is_mouse_button_just_pressed(self, button: int) -&gt; bool\n</code></pre> Check if a mouse button was just pressed this frame.</p>"},{"location":"api/input/#is_mouse_button_just_released","title":"is_mouse_button_just_released()","text":"<p><pre><code>def is_mouse_button_just_released(self, button: int) -&gt; bool\n</code></pre> Check if a mouse button was just released this frame.</p>"},{"location":"api/input/#key-constants","title":"Key Constants","text":"<p>Common keyboard key constants:</p> <pre><code>from pygame import K_a, K_b, K_c  # Letters\nfrom pygame import K_0, K_1, K_2  # Numbers\nfrom pygame import K_LEFT, K_RIGHT, K_UP, K_DOWN  # Arrows\nfrom pygame import K_SPACE, K_RETURN, K_ESCAPE  # Special keys\n</code></pre>"},{"location":"api/input/#mouse-button-constants","title":"Mouse Button Constants","text":"<p>Mouse button constants:</p> <pre><code>from pygame import BUTTON_LEFT, BUTTON_MIDDLE, BUTTON_RIGHT\n</code></pre>"},{"location":"api/input/#example-usage","title":"Example Usage","text":""},{"location":"api/input/#basic-input-handling","title":"Basic Input Handling","text":"<pre><code>from src.core.input import InputManager\nfrom pygame import K_SPACE, K_LEFT, K_RIGHT, BUTTON_LEFT\n\n# Create input manager\ninput_manager = InputManager()\n\ndef update():\n    # Update input state\n    input_manager.update()\n\n    # Check keyboard input\n    if input_manager.is_key_pressed(K_LEFT):\n        move_left()\n    elif input_manager.is_key_pressed(K_RIGHT):\n        move_right()\n\n    # Check for jump (only on initial press)\n    if input_manager.is_key_just_pressed(K_SPACE):\n        jump()\n\n    # Get mouse position\n    mouse_x, mouse_y = input_manager.get_mouse_position()\n\n    # Check mouse input\n    if input_manager.is_mouse_button_just_pressed(BUTTON_LEFT):\n        shoot(mouse_x, mouse_y)\n</code></pre>"},{"location":"api/input/#advanced-input-handling","title":"Advanced Input Handling","text":"<pre><code># Checking key combinations\nif (input_manager.is_key_pressed(K_LCTRL) and\n    input_manager.is_key_just_pressed(K_s)):\n    save_game()\n\n# Double click detection\nif (input_manager.is_mouse_button_just_pressed(BUTTON_LEFT) and\n    time.time() - last_click_time &lt; DOUBLE_CLICK_TIME):\n    handle_double_click()\n\n# Mouse movement\nprev_x, prev_y = last_mouse_pos\ncurr_x, curr_y = input_manager.get_mouse_position()\nmouse_delta_x = curr_x - prev_x\nmouse_delta_y = curr_y - prev_y\n</code></pre>"},{"location":"api/input/#best-practices","title":"Best Practices","text":"<ol> <li>Input State Management:</li> <li>Call <code>update()</code> once per frame</li> <li>Use <code>is_key_just_pressed()</code> for one-time actions</li> <li> <p>Use <code>is_key_pressed()</code> for continuous actions</p> </li> <li> <p>Input Mapping:</p> </li> <li>Define input constants at the start</li> <li>Consider creating an input configuration system</li> <li> <p>Support key rebinding</p> </li> <li> <p>Mouse Input:</p> </li> <li>Handle both relative and absolute positions</li> <li>Consider screen scaling when using positions</li> <li> <p>Implement proper double-click detection</p> </li> <li> <p>Performance:</p> </li> <li>Cache input states when needed</li> <li>Avoid checking input multiple times per frame</li> <li>Use efficient key combination detection</li> </ol>"},{"location":"api/input/#common-issues","title":"Common Issues","text":""},{"location":"api/input/#input-lag","title":"Input Lag","text":"<ul> <li>Missing <code>update()</code> calls</li> <li>Processing input multiple times</li> <li>Heavy processing in input handlers</li> </ul>"},{"location":"api/input/#missed-input","title":"Missed Input","text":"<ul> <li>Not using <code>is_key_just_pressed()</code></li> <li>Incorrect frame timing</li> <li>Input buffer overflow</li> </ul>"},{"location":"api/input/#key-combinations","title":"Key Combinations","text":"<ul> <li>Order dependency issues</li> <li>Race conditions</li> <li>Missing key release events</li> </ul>"},{"location":"api/input/#mouse-position","title":"Mouse Position","text":"<ul> <li>Incorrect coordinate space</li> <li>Screen scaling issues</li> <li>Resolution independence problems</li> </ul>"},{"location":"api/sprite/","title":"Sprite System","text":"<p>The sprite system handles loading, managing, and rendering game sprites and animations.</p>"},{"location":"api/sprite/#sprite","title":"Sprite","text":"<pre><code>class Sprite:\n    def __init__(\n        self,\n        sprite_sheet: SpriteSheet,\n        config: Optional[SpriteConfig] = None\n    ):\n        \"\"\"Initialize a sprite with the given sprite sheet and configuration.\"\"\"\n</code></pre>"},{"location":"api/sprite/#methods","title":"Methods","text":""},{"location":"api/sprite/#set_frame","title":"set_frame()","text":"<p><pre><code>def set_frame(self, frame_index: int) -&gt; None\n</code></pre> Set the current frame of the sprite.</p>"},{"location":"api/sprite/#draw","title":"draw()","text":"<p><pre><code>def draw(self, surface: pygame.Surface) -&gt; None\n</code></pre> Draw the sprite to the given surface.</p>"},{"location":"api/sprite/#spritesheet","title":"SpriteSheet","text":"<pre><code>class SpriteSheet:\n    def __init__(self, texture_path: str):\n        \"\"\"Load a sprite sheet from the given image file.\"\"\"\n</code></pre>"},{"location":"api/sprite/#methods_1","title":"Methods","text":""},{"location":"api/sprite/#add_frame","title":"add_frame()","text":"<p><pre><code>def add_frame(self, frame: SpriteFrame) -&gt; int\n</code></pre> Add a frame to the sprite sheet. Returns the frame index.</p>"},{"location":"api/sprite/#add_frames_grid","title":"add_frames_grid()","text":"<p><pre><code>def add_frames_grid(\n    self,\n    frame_width: int,\n    frame_height: int,\n    margin: int = 0,\n    spacing: int = 0\n) -&gt; None\n</code></pre> Add frames from a grid layout. Useful for uniform sprite sheets.</p>"},{"location":"api/sprite/#spriteframe","title":"SpriteFrame","text":"<p>Configuration for a single frame in a sprite sheet.</p> <pre><code>@dataclass\nclass SpriteFrame:\n    x: int\n    y: int\n    width: int\n    height: int\n</code></pre>"},{"location":"api/sprite/#fields","title":"Fields","text":"<ul> <li><code>x</code>: X position of the frame in the sprite sheet</li> <li><code>y</code>: Y position of the frame in the sprite sheet</li> <li><code>width</code>: Width of the frame</li> <li><code>height</code>: Height of the frame</li> </ul>"},{"location":"api/sprite/#spriteconfig","title":"SpriteConfig","text":"<p>Configuration for sprite rendering.</p> <pre><code>@dataclass\nclass SpriteConfig:\n    x: float = 0.0\n    y: float = 0.0\n    scale_x: float = 1.0\n    scale_y: float = 1.0\n    rotation: int = 0  # Degrees, must be multiple of 90\n    flip_x: bool = False\n    flip_y: bool = False\n    alpha: int = 255\n    z_index: int = 0\n</code></pre>"},{"location":"api/sprite/#fields_1","title":"Fields","text":"<ul> <li><code>x</code>: X position for rendering</li> <li><code>y</code>: Y position for rendering</li> <li><code>scale_x</code>: Horizontal scale factor</li> <li><code>scale_y</code>: Vertical scale factor</li> <li><code>rotation</code>: Rotation in degrees (must be multiple of 90)</li> <li><code>flip_x</code>: Horizontally flip the sprite</li> <li><code>flip_y</code>: Vertically flip the sprite</li> <li><code>alpha</code>: Transparency (0-255)</li> <li><code>z_index</code>: Rendering order</li> </ul>"},{"location":"api/sprite/#example-usage","title":"Example Usage","text":""},{"location":"api/sprite/#loading-a-sprite-sheet","title":"Loading a Sprite Sheet","text":"<pre><code>from src.core.sprite import SpriteSheet, SpriteFrame\n\n# Load sprite sheet\nsheet = SpriteSheet(\"player.png\")\n\n# Add individual frames\nsheet.add_frame(SpriteFrame(0, 0, 32, 32))  # Idle\nsheet.add_frame(SpriteFrame(32, 0, 32, 32))  # Walk 1\nsheet.add_frame(SpriteFrame(64, 0, 32, 32))  # Walk 2\n\n# Or add frames from a grid\nsheet.add_frames_grid(\n    frame_width=32,\n    frame_height=32,\n    margin=1,\n    spacing=1\n)\n</code></pre>"},{"location":"api/sprite/#creating-and-using-sprites","title":"Creating and Using Sprites","text":"<pre><code>from src.core.sprite import Sprite, SpriteConfig\n\n# Create sprite configuration\nconfig = SpriteConfig(\n    x=100,\n    y=100,\n    scale_x=2.0,\n    scale_y=2.0,\n    flip_x=False\n)\n\n# Create sprite\nsprite = Sprite(sheet, config)\n\n# Set current frame\nsprite.set_frame(1)  # Show walking frame\n\n# Draw sprite\nsprite.draw(window.surface)\n</code></pre>"},{"location":"api/sprite/#best-practices","title":"Best Practices","text":"<ol> <li>Sprite Sheet Organization:</li> <li>Group related frames together</li> <li>Use consistent frame sizes when possible</li> <li>Add padding to prevent bleeding</li> <li> <p>Consider power-of-two textures for compatibility</p> </li> <li> <p>Memory Management:</p> </li> <li>Share sprite sheets between similar sprites</li> <li>Unload unused sprite sheets</li> <li> <p>Use texture atlases for small sprites</p> </li> <li> <p>Animation:</p> </li> <li>Use frame indices for animation sequences</li> <li>Consider frame timing in animation loops</li> <li> <p>Implement state machines for complex animations</p> </li> <li> <p>Performance:</p> </li> <li>Batch similar sprites together</li> <li>Use sprite culling for off-screen objects</li> <li>Minimize sprite sheet switches</li> </ol>"},{"location":"api/sprite/#common-issues","title":"Common Issues","text":""},{"location":"api/sprite/#texture-bleeding","title":"Texture Bleeding","text":"<ul> <li>Add padding between frames</li> <li>Use texture coordinates slightly inset from edges</li> <li>Ensure power-of-two textures when required</li> </ul>"},{"location":"api/sprite/#performance","title":"Performance","text":"<ul> <li>Too many individual sprites</li> <li>Frequent sprite sheet switching</li> <li>Excessive scaling or rotation</li> </ul>"},{"location":"api/sprite/#memory-usage","title":"Memory Usage","text":"<ul> <li>Large sprite sheets</li> <li>Duplicate sprite sheet loading</li> <li>Unused frames in memory</li> </ul>"},{"location":"api/sprite/#visual-artifacts","title":"Visual Artifacts","text":"<ul> <li>Incorrect transparency</li> <li>Scaling artifacts</li> <li>Rotation limitations</li> </ul>"},{"location":"api/sprite_renderer/","title":"Sprite Renderer","text":"<p>The sprite renderer system handles efficient rendering of multiple sprites with z-ordering and batching support.</p>"},{"location":"api/sprite_renderer/#spriterenderer","title":"SpriteRenderer","text":"<pre><code>class SpriteRenderer:\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the sprite renderer.\"\"\"\n</code></pre>"},{"location":"api/sprite_renderer/#methods","title":"Methods","text":""},{"location":"api/sprite_renderer/#add_sprite","title":"add_sprite()","text":"<p><pre><code>def add_sprite(self, sprite: Sprite) -&gt; None\n</code></pre> Add a sprite to be rendered.</p>"},{"location":"api/sprite_renderer/#remove_sprite","title":"remove_sprite()","text":"<p><pre><code>def remove_sprite(self, sprite: Sprite) -&gt; None\n</code></pre> Remove a sprite from rendering.</p>"},{"location":"api/sprite_renderer/#clear","title":"clear()","text":"<p><pre><code>def clear(self) -&gt; None\n</code></pre> Remove all sprites from the renderer.</p>"},{"location":"api/sprite_renderer/#render","title":"render()","text":"<p><pre><code>def render(self, surface: pygame.Surface) -&gt; None\n</code></pre> Render all sprites in order of z-index.</p>"},{"location":"api/sprite_renderer/#best-practices","title":"Best Practices","text":"<ol> <li>Batching:</li> <li>Group sprites with similar z-indices together</li> <li>Add sprites in bulk when possible</li> <li> <p>Clear sprites when changing scenes</p> </li> <li> <p>Performance:</p> </li> <li>Remove unused sprites promptly</li> <li>Use appropriate z-indices to minimize state changes</li> <li> <p>Consider sprite atlases for large numbers of sprites</p> </li> <li> <p>Z-Index Management:</p> </li> <li>Use consistent z-index ranges for different types of objects</li> <li>Leave gaps between z-indices for future additions</li> <li>Document z-index ranges in your game</li> </ol>"},{"location":"api/sprite_renderer/#common-issues","title":"Common Issues","text":""},{"location":"api/sprite_renderer/#performance","title":"Performance","text":"<ul> <li>Too many individual sprite additions/removals</li> <li>Excessive z-index changes</li> <li>Large number of unique textures</li> </ul>"},{"location":"api/sprite_renderer/#memory-usage","title":"Memory Usage","text":"<ul> <li>Not removing sprites when they're no longer needed</li> <li>Keeping references to removed sprites</li> <li>Memory leaks from circular references</li> </ul>"},{"location":"api/sprite_renderer/#rendering-artifacts","title":"Rendering Artifacts","text":"<ul> <li>Z-index conflicts</li> <li>Sprite flickering</li> <li>Incorrect sprite ordering</li> </ul>"},{"location":"api/vector2d/","title":"Vector2D","text":"<p>A 2D vector implementation for handling positions, velocities, and other 2D quantities.</p>"},{"location":"api/vector2d/#vector2d_1","title":"Vector2D","text":"<pre><code>@dataclass\nclass Vector2D:\n    x: float = 0.0\n    y: float = 0.0\n</code></pre>"},{"location":"api/vector2d/#methods","title":"Methods","text":""},{"location":"api/vector2d/#add","title":"add()","text":"<p><pre><code>def __add__(self, other: Vector2D) -&gt; Vector2D\n</code></pre> Add two vectors together.</p>"},{"location":"api/vector2d/#sub","title":"sub()","text":"<p><pre><code>def __sub__(self, other: Vector2D) -&gt; Vector2D\n</code></pre> Subtract one vector from another.</p>"},{"location":"api/vector2d/#mul","title":"mul()","text":"<p><pre><code>def __mul__(self, scalar: float) -&gt; Vector2D\n</code></pre> Multiply vector by a scalar.</p>"},{"location":"api/vector2d/#truediv","title":"truediv()","text":"<p><pre><code>def __truediv__(self, scalar: float) -&gt; Vector2D\n</code></pre> Divide vector by a scalar.</p>"},{"location":"api/vector2d/#magnitude","title":"magnitude()","text":"<p><pre><code>def magnitude(self) -&gt; float\n</code></pre> Calculate the magnitude (length) of the vector.</p>"},{"location":"api/vector2d/#normalize","title":"normalize()","text":"<p><pre><code>def normalize(self) -&gt; Vector2D\n</code></pre> Return a normalized copy of this vector.</p>"},{"location":"api/vector2d/#clamp","title":"clamp()","text":"<p><pre><code>def clamp(self, max_magnitude: float) -&gt; Vector2D\n</code></pre> Clamp the vector's magnitude to a maximum value.</p>"},{"location":"api/vector2d/#dot","title":"dot()","text":"<p><pre><code>def dot(self, other: Vector2D) -&gt; float\n</code></pre> Calculate dot product with another vector.</p>"},{"location":"api/vector2d/#example-usage","title":"Example Usage","text":"<pre><code># Create vectors\npos = Vector2D(100.0, 200.0)\nvelocity = Vector2D(5.0, -3.0)\n\n# Vector arithmetic\nnew_pos = pos + velocity * dt\n\n# Normalization\ndirection = velocity.normalize()\n\n# Magnitude\nspeed = velocity.magnitude()\n\n# Clamping\nclamped_velocity = velocity.clamp(max_speed)\n\n# Dot product\nangle_cos = direction.dot(Vector2D(1.0, 0.0))\n</code></pre>"},{"location":"api/vector2d/#best-practices","title":"Best Practices","text":"<ol> <li>Performance:</li> <li>Cache vector calculations when possible</li> <li>Use in-place operations for frequent updates</li> <li> <p>Consider using integers for pixel-perfect positioning</p> </li> <li> <p>Precision:</p> </li> <li>Be aware of floating-point precision issues</li> <li>Use appropriate epsilon values for comparisons</li> <li> <p>Consider rounding for pixel alignment</p> </li> <li> <p>Memory:</p> </li> <li>Reuse vector objects when possible</li> <li>Use pooling for frequently created/destroyed vectors</li> <li>Clear vector references when no longer needed</li> </ol>"},{"location":"api/vector2d/#common-issues","title":"Common Issues","text":""},{"location":"api/vector2d/#precision","title":"Precision","text":"<ul> <li>Floating-point rounding errors</li> <li>Integer vs. float position mismatches</li> <li>Accumulating errors in physics calculations</li> </ul>"},{"location":"api/vector2d/#performance","title":"Performance","text":"<ul> <li>Unnecessary vector allocations</li> <li>Frequent magnitude calculations</li> <li>Redundant normalizations</li> </ul>"},{"location":"api/vector2d/#logic","title":"Logic","text":"<ul> <li>Division by zero in normalization</li> <li>Incorrect vector math operations</li> <li>Missing vector cleanup</li> </ul>"},{"location":"api/window/","title":"Window","text":"<p>The window system handles the game's display and provides basic rendering functionality.</p>"},{"location":"api/window/#window_1","title":"Window","text":"<pre><code>class Window:\n    def __init__(self, config: WindowConfig):\n        \"\"\"Initialize the window with the given configuration.\"\"\"\n</code></pre>"},{"location":"api/window/#methods","title":"Methods","text":""},{"location":"api/window/#clear","title":"clear()","text":"<p><pre><code>def clear(self, color: Tuple[int, int, int] = (0, 0, 0)) -&gt; None\n</code></pre> Clear the window with the specified color (default: black).</p>"},{"location":"api/window/#present","title":"present()","text":"<p><pre><code>def present(self) -&gt; None\n</code></pre> Scale and present the internal surface to the display.</p>"},{"location":"api/window/#set_title","title":"set_title()","text":"<p><pre><code>def set_title(self, title: str) -&gt; None\n</code></pre> Set the window title.</p>"},{"location":"api/window/#toggle_fullscreen","title":"toggle_fullscreen()","text":"<p><pre><code>def toggle_fullscreen(self) -&gt; None\n</code></pre> Toggle fullscreen mode.</p>"},{"location":"api/window/#properties","title":"Properties","text":""},{"location":"api/window/#surface","title":"surface","text":"<p><pre><code>@property\ndef surface(self) -&gt; pygame.Surface\n</code></pre> Get the internal rendering surface.</p>"},{"location":"api/window/#display_surface","title":"display_surface","text":"<p><pre><code>@property\ndef display_surface(self) -&gt; pygame.Surface\n</code></pre> Get the scaled display surface.</p>"},{"location":"api/window/#windowconfig","title":"WindowConfig","text":"<p>Configuration options for the game window.</p> <pre><code>@dataclass\nclass WindowConfig:\n    title: str\n    width: int\n    height: int\n    scale: int = 1\n    vsync: bool = True\n    fullscreen: bool = False\n</code></pre>"},{"location":"api/window/#fields","title":"Fields","text":"<ul> <li><code>title</code>: Window title</li> <li><code>width</code>: Window width in pixels</li> <li><code>height</code>: Window height in pixels</li> <li><code>scale</code>: Integer scaling factor (default: 1)</li> <li><code>vsync</code>: Enable vertical synchronization (default: True)</li> <li><code>fullscreen</code>: Start in fullscreen mode (default: False)</li> </ul>"},{"location":"api/window/#example-usage","title":"Example Usage","text":"<pre><code>from src.core import Window, WindowConfig\n\n# Create window configuration\nconfig = WindowConfig(\n    title=\"My Game\",\n    width=320,\n    height=240,\n    scale=2,\n    vsync=True\n)\n\n# Create window\nwindow = Window(config)\n\n# Game loop\nwhile True:\n    # Clear window\n    window.clear((100, 149, 237))  # Cornflower blue\n\n    # Draw game objects to window.surface\n    # ...\n\n    # Update display\n    window.present()\n</code></pre>"},{"location":"api/window/#best-practices","title":"Best Practices","text":"<ol> <li>Resolution: Choose a base resolution that matches your game's style:</li> <li>256\u00d7224: NES/Master System style</li> <li>320\u00d7240: SNES/Genesis style</li> <li> <p>640\u00d7480: Early PC style</p> </li> <li> <p>Scaling: Use integer scaling to maintain pixel-perfect rendering: <pre><code>config = WindowConfig(\n    width=320,\n    height=240,\n    scale=2  # Creates a 640\u00d7480 window\n)\n</code></pre></p> </li> <li> <p>VSync: Enable VSync to prevent screen tearing: <pre><code>config = WindowConfig(\n    # ...\n    vsync=True\n)\n</code></pre></p> </li> <li> <p>Surface Management: Draw to the internal surface, not the display surface: <pre><code># Correct\nwindow.surface.blit(sprite, position)\n\n# Incorrect\nwindow.display_surface.blit(sprite, position)\n</code></pre></p> </li> </ol>"},{"location":"api/window/#common-issues","title":"Common Issues","text":""},{"location":"api/window/#blurry-graphics","title":"Blurry Graphics","text":"<ul> <li>Ensure you're using integer scaling values</li> <li>Draw to the internal surface, not the display surface</li> <li>Avoid floating-point positions for sprites</li> </ul>"},{"location":"api/window/#performance-issues","title":"Performance Issues","text":"<ul> <li>Use hardware acceleration when available</li> <li>Batch similar draw operations</li> <li>Minimize surface locking/unlocking</li> <li>Consider using display lists for static elements</li> </ul>"},{"location":"api/window/#fullscreen-problems","title":"Fullscreen Problems","text":"<ul> <li>Handle window resize events properly</li> <li>Save/restore window state when toggling fullscreen</li> <li>Consider different scaling modes for fullscreen</li> </ul>"},{"location":"guides/best-practices/","title":"Best Practices Guide","text":"<p>This guide outlines recommended practices for developing games with the Retro Game Engine.</p>"},{"location":"guides/best-practices/#project-structure","title":"Project Structure","text":""},{"location":"guides/best-practices/#asset-organization","title":"Asset Organization","text":"<pre><code>your_game/\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 sprites/      # Sprite sheets and animations\n\u2502   \u251c\u2500\u2500 audio/        # Sound effects and music\n\u2502   \u251c\u2500\u2500 tilemaps/     # Level data and tilesets\n\u2502   \u2514\u2500\u2500 fonts/        # Bitmap fonts\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/   # Custom game components\n\u2502   \u251c\u2500\u2500 scenes/       # Game scenes\n\u2502   \u2514\u2500\u2500 systems/      # Game systems\n\u2514\u2500\u2500 config/           # Game configuration files\n</code></pre>"},{"location":"guides/best-practices/#code-organization","title":"Code Organization","text":"<ul> <li>Keep scenes focused and single-purpose</li> <li>Use components for reusable functionality</li> <li>Implement systems for global game logic</li> <li>Separate configuration from code</li> </ul>"},{"location":"guides/best-practices/#resource-management","title":"Resource Management","text":""},{"location":"guides/best-practices/#memory","title":"Memory","text":"<ul> <li>Unload unused assets when changing scenes</li> <li>Use sprite sheets instead of individual images</li> <li>Pool frequently created/destroyed objects</li> <li>Clear event listeners and references</li> </ul>"},{"location":"guides/best-practices/#asset-loading","title":"Asset Loading","text":"<ul> <li>Preload assets during scene initialization</li> <li>Use asynchronous loading for large assets</li> <li>Implement loading screens for smooth transitions</li> <li>Cache frequently used resources</li> </ul>"},{"location":"guides/best-practices/#performance","title":"Performance","text":""},{"location":"guides/best-practices/#rendering","title":"Rendering","text":"<ul> <li>Batch similar sprites together</li> <li>Use appropriate z-indices for layering</li> <li>Implement view culling for large levels</li> <li>Minimize draw calls and state changes</li> </ul>"},{"location":"guides/best-practices/#physics","title":"Physics","text":"<ul> <li>Use simple collision shapes when possible</li> <li>Implement spatial partitioning for many objects</li> <li>Update physics at fixed time steps</li> <li>Disable physics for off-screen objects</li> </ul>"},{"location":"guides/best-practices/#input","title":"Input","text":"<ul> <li>Process input once per frame</li> <li>Use input buffering for responsive controls</li> <li>Implement input mapping for configurability</li> <li>Handle multiple input methods consistently</li> </ul>"},{"location":"guides/best-practices/#game-design","title":"Game Design","text":""},{"location":"guides/best-practices/#visual-style","title":"Visual Style","text":"<ul> <li>Maintain consistent pixel scale</li> <li>Use limited color palettes</li> <li>Design clear visual hierarchies</li> <li>Consider readability at all resolutions</li> </ul>"},{"location":"guides/best-practices/#audio","title":"Audio","text":"<ul> <li>Keep sound effects short and impactful</li> <li>Use audio pooling for frequent sounds</li> <li>Implement priority system for channels</li> <li>Consider music loop points carefully</li> </ul>"},{"location":"guides/best-practices/#user-experience","title":"User Experience","text":"<ul> <li>Provide clear feedback for actions</li> <li>Implement consistent controls</li> <li>Use screen transitions for loading</li> <li>Save game state frequently</li> </ul>"},{"location":"guides/best-practices/#testing","title":"Testing","text":""},{"location":"guides/best-practices/#performance-testing","title":"Performance Testing","text":"<ul> <li>Test with minimum spec hardware</li> <li>Profile CPU and memory usage</li> <li>Monitor frame rate consistency</li> <li>Test with various input methods</li> </ul>"},{"location":"guides/best-practices/#game-testing","title":"Game Testing","text":"<ul> <li>Test edge cases in gameplay</li> <li>Verify save/load functionality</li> <li>Check all possible transitions</li> <li>Test error handling</li> </ul>"},{"location":"guides/best-practices/#deployment","title":"Deployment","text":""},{"location":"guides/best-practices/#building","title":"Building","text":"<ul> <li>Set appropriate version numbers</li> <li>Include all required assets</li> <li>Optimize assets for distribution</li> <li>Test builds on target platforms</li> </ul>"},{"location":"guides/best-practices/#distribution","title":"Distribution","text":"<ul> <li>Include clear installation instructions</li> <li>Provide system requirements</li> <li>Document known issues</li> <li>Include version history</li> </ul>"},{"location":"guides/best-practices/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"guides/best-practices/#memory-leaks","title":"Memory Leaks","text":"<ul> <li>Not cleaning up event listeners</li> <li>Keeping references to destroyed objects</li> <li>Not disposing of textures</li> <li>Circular references in components</li> </ul>"},{"location":"guides/best-practices/#performance-issues","title":"Performance Issues","text":"<ul> <li>Too many active physics objects</li> <li>Inefficient collision checks</li> <li>Unoptimized sprite rendering</li> <li>Memory fragmentation</li> </ul>"},{"location":"guides/best-practices/#game-design_1","title":"Game Design","text":"<ul> <li>Inconsistent difficulty curves</li> <li>Unresponsive controls</li> <li>Unclear objectives</li> <li>Poor save point placement</li> </ul>"},{"location":"guides/faq/","title":"Frequently Asked Questions","text":""},{"location":"guides/faq/#general","title":"General","text":""},{"location":"guides/faq/#what-is-the-retro-game-engine","title":"What is the Retro Game Engine?","text":"<p>The Retro Game Engine is a Python-based 2D game engine built on top of Pygame, designed for creating retro-style games with modern development practices.</p>"},{"location":"guides/faq/#what-python-versions-are-supported","title":"What Python versions are supported?","text":"<p>The engine supports Python 3.9 and above.</p>"},{"location":"guides/faq/#technical-questions","title":"Technical Questions","text":""},{"location":"guides/faq/#how-do-i-handle-input-in-my-game","title":"How do I handle input in my game?","text":"<pre><code>from retro_game_engine import Input, Key\n\n# Check for keyboard input\nif Input.is_key_pressed(Key.SPACE):\n    player.jump()\n\n# Check for continuous input\nif Input.is_key_down(Key.RIGHT):\n    player.move_right()\n</code></pre>"},{"location":"guides/faq/#how-do-i-play-audio","title":"How do I play audio?","text":"<pre><code>from retro_game_engine import AudioManager\n\n# Load and play a sound\naudio_manager = AudioManager()\naudio_manager.load_sound(\"jump\", \"assets/jump.wav\")\naudio_manager.play_sound(\"jump\")\n</code></pre>"},{"location":"guides/faq/#how-do-i-create-a-new-scene","title":"How do I create a new scene?","text":"<pre><code>from retro_game_engine import Scene\n\nclass GameScene(Scene):\n    def __init__(self):\n        super().__init__()\n\n    def update(self, dt: float):\n        # Update game logic here\n        pass\n\n    def render(self):\n        # Render game objects here\n        pass\n</code></pre>"},{"location":"guides/faq/#how-do-i-manage-game-states","title":"How do I manage game states?","text":"<p>Use the SceneManager to handle different game states: <pre><code>from retro_game_engine import SceneManager\n\nscene_manager = SceneManager()\nscene_manager.register_scene(\"menu\", MenuScene)\nscene_manager.register_scene(\"game\", GameScene)\nscene_manager.push_scene(\"menu\")\n</code></pre></p>"},{"location":"guides/faq/#performance","title":"Performance","text":""},{"location":"guides/faq/#how-do-i-optimize-my-game","title":"How do I optimize my game?","text":"<ol> <li>Use sprite batching for rendering multiple sprites</li> <li>Implement object pooling for frequently created/destroyed objects</li> <li>Use the physics system's spatial partitioning</li> <li>Keep the update loop efficient</li> </ol>"},{"location":"guides/faq/#whats-the-recommended-way-to-handle-large-tilemaps","title":"What's the recommended way to handle large tilemaps?","text":"<p>Use the built-in TileMap system which includes: - Efficient rendering with culling - Collision detection optimization - Layer support - TMX file format support</p>"},{"location":"guides/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/faq/#why-isnt-my-game-running-at-the-target-fps","title":"Why isn't my game running at the target FPS?","text":"<ol> <li>Check if you're doing too much work in the update loop</li> <li>Verify that your assets are optimized</li> <li>Use the performance metrics to identify bottlenecks: <pre><code>game_loop = GameLoop(update, render)\nprint(f\"FPS: {game_loop._metrics.fps}\")\nprint(f\"Frame Time: {game_loop._metrics.frame_time}ms\")\n</code></pre></li> </ol>"},{"location":"guides/faq/#how-do-i-debug-collision-issues","title":"How do I debug collision issues?","text":"<ol> <li>Enable debug rendering for colliders</li> <li>Check collision layers and masks</li> <li>Verify object positions and sizes</li> <li>Use the physics debug tools</li> </ol>"},{"location":"guides/faq/#contributing","title":"Contributing","text":""},{"location":"guides/faq/#how-can-i-contribute-to-the-engine","title":"How can I contribute to the engine?","text":"<ol> <li>Check our GitHub Issues</li> <li>Read our Contributing Guide</li> <li>Submit a Pull Request</li> </ol>"},{"location":"guides/faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<ol> <li>Check if the bug is already reported</li> <li>Include a minimal reproducible example</li> <li>Provide system information and engine version</li> <li>Submit an issue on GitHub</li> </ol>"},{"location":"guides/getting_started/","title":"Getting Started with Retro Game Engine","text":"<p>This guide will help you get started with creating your first game using the Retro Game Engine.</p>"},{"location":"guides/getting_started/#installation","title":"Installation","text":"<ol> <li> <p>First, make sure you have Python 3.9 or newer installed: <pre><code>python --version\n</code></pre></p> </li> <li> <p>Install the engine using pip: <pre><code>pip install retro-game-engine\n</code></pre></p> </li> </ol> <p>Or using Poetry: <pre><code>poetry add retro-game-engine\n</code></pre></p>"},{"location":"guides/getting_started/#creating-your-first-game","title":"Creating Your First Game","text":"<p>Here's a simple example that creates a window and displays a sprite:</p> <pre><code>from src.core import Window, WindowConfig\nfrom src.core.game_loop import GameLoop, GameLoopConfig\nfrom src.core.sprite import Sprite, SpriteSheet, SpriteConfig\n\nclass MyGame:\n    def __init__(self):\n        # Create window\n        window_config = WindowConfig(\n            title=\"My First Game\",\n            width=320,\n            height=240,\n            scale=2\n        )\n        self.window = Window(window_config)\n\n        # Load sprite\n        self.sprite_sheet = SpriteSheet(\"player.png\")\n        self.sprite = Sprite(\n            self.sprite_sheet,\n            SpriteConfig(x=160, y=120)\n        )\n\n        # Create game loop\n        self.game_loop = GameLoop(\n            update_func=self.update,\n            render_func=self.render,\n            config=GameLoopConfig(fps=60)\n        )\n\n    def update(self, dt: float) -&gt; None:\n        # Update game state\n        pass\n\n    def render(self) -&gt; None:\n        # Clear screen\n        self.window.clear()\n\n        # Draw sprite\n        self.sprite.draw(self.window.surface)\n\n        # Update display\n        self.window.present()\n\n    def run(self) -&gt; None:\n        self.game_loop.run()\n\nif __name__ == \"__main__\":\n    game = MyGame()\n    game.run()\n</code></pre>"},{"location":"guides/getting_started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the examples for more complex game implementations</li> <li>Read the API Reference for detailed documentation</li> <li>Learn about the Entity Component System</li> <li>See Best Practices for tips and guidelines</li> </ul>"},{"location":"guides/getting_started/#core-concepts","title":"Core Concepts","text":""},{"location":"guides/getting_started/#gameloop","title":"GameLoop","text":"<p>The <code>GameLoop</code> class manages the game's main loop, handling: - Window creation and management - Scene management - Input processing - Frame timing</p>"},{"location":"guides/getting_started/#scene","title":"Scene","text":"<p>Scenes represent different states or levels in your game: - <code>update(delta_time)</code>: Called every frame to update game logic - <code>draw(surface)</code>: Called every frame to render graphics - <code>on_enter()</code>: Called when the scene becomes active - <code>on_exit()</code>: Called when leaving the scene</p>"},{"location":"guides/getting_started/#sprite","title":"Sprite","text":"<p>The <code>Sprite</code> class handles image rendering with features like: - Position and rotation - Scale and flipping - Animation support - Collision detection</p>"},{"location":"guides/getting_started/#input","title":"Input","text":"<p>The <code>Input</code> class provides methods to handle: - Keyboard input - Mouse input - Gamepad support</p>"},{"location":"guides/getting_started/#physics","title":"Physics","text":"<p>The physics system includes: - Collision detection - Gravity simulation - Velocity and acceleration</p>"},{"location":"guides/getting_started/#common-issues","title":"Common Issues","text":""},{"location":"guides/getting_started/#game-runs-slowly","title":"Game runs slowly","text":"<ul> <li>Check your sprite sizes and number of objects</li> <li>Use sprite sheets for animations</li> <li>Implement object pooling for multiple objects</li> </ul>"},{"location":"guides/getting_started/#collision-detection-issues","title":"Collision detection issues","text":"<ul> <li>Ensure sprite hitboxes are properly set</li> <li>Use debug rendering to visualize collisions</li> <li>Check for proper object cleanup</li> </ul>"},{"location":"guides/getting_started/#memory-usage-grows-over-time","title":"Memory usage grows over time","text":"<ul> <li>Properly dispose of unused resources</li> <li>Clear sprite references when removing objects</li> <li>Use the scene cleanup methods</li> </ul>"},{"location":"guides/getting_started/#getting-help","title":"Getting Help","text":"<p>If you run into issues: 1. Check the documentation 2. Search existing GitHub issues</p> <ol> <li>Open a new GitHub issue</li> </ol> <p>Happy game development! \ud83c\udfae</p>"},{"location":"guides/migration/","title":"Migration Guide","text":"<p>This guide helps you migrate your game projects between different versions of the Retro Game Engine.</p>"},{"location":"guides/migration/#migrating-to-100","title":"Migrating to 1.0.0","text":""},{"location":"guides/migration/#breaking-changes","title":"Breaking Changes","text":"<ol> <li> <p>Game Loop API Changes    <pre><code># Old (0.x)\ngame = Game()\ngame.start()\n\n# New (1.0)\ngame = Game()\ngame.run()\n</code></pre></p> </li> <li> <p>Entity Component System    <pre><code># Old (0.x)\nentity.add_component(Transform(x=0, y=0))\n\n# New (1.0)\nentity.add_component(Transform(position=Vector2(0, 0)))\n</code></pre></p> </li> <li> <p>Scene Management    <pre><code># Old (0.x)\ngame.change_scene(\"menu\")\n\n# New (1.0)\ngame.scene_manager.push_scene(\"menu\")\n</code></pre></p> </li> </ol>"},{"location":"guides/migration/#deprecated-features","title":"Deprecated Features","text":"<p>The following features are deprecated and will be removed in version 2.0: - <code>Game.old_update()</code> - Use <code>Game.update()</code> instead - <code>Sprite.set_position()</code> - Use <code>Transform.position</code> instead - <code>Scene.add()</code> - Use <code>Scene.add_entity()</code> instead</p>"},{"location":"guides/migration/#new-features","title":"New Features","text":"<ol> <li> <p>Improved Performance Metrics    <pre><code>game.metrics.fps  # Current FPS\ngame.metrics.frame_time  # Time per frame\n</code></pre></p> </li> <li> <p>Enhanced Input System    <pre><code>input.bind_action(\"jump\", Key.SPACE)\ninput.is_action_pressed(\"jump\")\n</code></pre></p> </li> <li> <p>Asset Management    <pre><code>assets.load_texture(\"player\", \"assets/player.png\")\nsprite.texture = assets.get_texture(\"player\")\n</code></pre></p> </li> </ol>"},{"location":"guides/migration/#migrating-to-090","title":"Migrating to 0.9.0","text":""},{"location":"guides/migration/#breaking-changes_1","title":"Breaking Changes","text":"<ol> <li> <p>Input System Changes    <pre><code># Old (0.8.x)\nif input.is_key_pressed(Keys.SPACE):\n    pass\n\n# New (0.9)\nif input.is_key_pressed(Key.SPACE):\n    pass\n</code></pre></p> </li> <li> <p>Audio System    <pre><code># Old (0.8.x)\naudio.play_sound(\"jump.wav\")\n\n# New (0.9)\naudio.play(\"jump\")\n</code></pre></p> </li> </ol>"},{"location":"guides/migration/#deprecated-features_1","title":"Deprecated Features","text":"<ul> <li><code>Game.fixed_update</code> - Will be removed in 1.0</li> <li>Old collision system - Use new physics system instead</li> </ul>"},{"location":"guides/migration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"guides/migration/#common-migration-issues","title":"Common Migration Issues","text":"<ol> <li> <p>Missing Components <pre><code># Solution: Add required components\nentity.add_component(Transform())\nentity.add_component(Renderer())\n</code></pre></p> </li> <li> <p>Scene Loading Errors <pre><code># Solution: Update scene registration\ngame.scene_manager.register_scene(\"menu\", MenuScene)\n</code></pre></p> </li> <li> <p>Input Binding Issues <pre><code># Solution: Update key constants\ninput.bind_action(\"move_right\", Key.D)  # Not Keys.D\n</code></pre></p> </li> </ol>"},{"location":"guides/migration/#automated-migration","title":"Automated Migration","text":"<p>We provide a migration script to help automate some changes:</p> <pre><code>python -m retro_game_engine.tools.migrate your_game_directory\n</code></pre>"},{"location":"guides/migration/#version-history","title":"Version History","text":"<p>See our CHANGELOG.md for detailed version history and changes.</p>"},{"location":"guides/migration/#getting-help","title":"Getting Help","text":"<p>If you encounter issues during migration: 1. Check our GitHub Issues 2. Join our Discord community 3. Read the API Reference</p>"},{"location":"guides/performance/","title":"Performance Tips","text":"<p>This guide provides detailed strategies for optimizing your game's performance with the Retro Game Engine.</p>"},{"location":"guides/performance/#profiling-and-monitoring","title":"Profiling and Monitoring","text":""},{"location":"guides/performance/#built-in-tools","title":"Built-in Tools","text":"<ul> <li>Use <code>GameLoop.performance_metrics</code> to monitor:</li> <li>Frame rate (FPS)</li> <li>Frame time</li> <li>Update time</li> <li>Render time</li> <li>Physics time</li> </ul>"},{"location":"guides/performance/#external-tools","title":"External Tools","text":"<ul> <li>Python profilers (cProfile, line_profiler)</li> <li>Memory profilers (memory_profiler)</li> <li>System monitoring tools</li> </ul>"},{"location":"guides/performance/#rendering-optimization","title":"Rendering Optimization","text":""},{"location":"guides/performance/#sprite-management","title":"Sprite Management","text":"<pre><code># Bad: Creating sprites individually\nfor i in range(100):\n    sprite = Sprite(sheet, SpriteConfig(x=i*32, y=100))\n    renderer.add_sprite(sprite)\n\n# Good: Using sprite batching\nsprite_batch = []\nfor i in range(100):\n    sprite = Sprite(sheet, SpriteConfig(x=i*32, y=100))\n    sprite_batch.append(sprite)\nrenderer.add_sprites(sprite_batch)\n</code></pre>"},{"location":"guides/performance/#z-index-organization","title":"Z-Index Organization","text":"<pre><code># Define clear z-index ranges\nZ_BACKGROUND = 0\nZ_TERRAIN = 100\nZ_OBJECTS = 200\nZ_CHARACTERS = 300\nZ_PARTICLES = 400\nZ_UI = 500\n</code></pre>"},{"location":"guides/performance/#view-culling","title":"View Culling","text":"<pre><code>def is_visible(sprite: Sprite, camera: Rect) -&gt; bool:\n    sprite_rect = sprite.get_bounds()\n    return camera.colliderect(sprite_rect)\n\n# Only render visible sprites\nvisible_sprites = [s for s in sprites if is_visible(s, camera_rect)]\nrenderer.render(visible_sprites)\n</code></pre>"},{"location":"guides/performance/#memory-management","title":"Memory Management","text":""},{"location":"guides/performance/#object-pooling","title":"Object Pooling","text":"<pre><code>class BulletPool:\n    def __init__(self, size: int):\n        self.bullets = [Bullet() for _ in range(size)]\n        self.active = set()\n\n    def get_bullet(self) -&gt; Optional[Bullet]:\n        for bullet in self.bullets:\n            if bullet not in self.active:\n                self.active.add(bullet)\n                return bullet\n        return None\n\n    def return_bullet(self, bullet: Bullet):\n        self.active.remove(bullet)\n        bullet.reset()\n</code></pre>"},{"location":"guides/performance/#asset-management","title":"Asset Management","text":"<pre><code>class AssetManager:\n    def __init__(self):\n        self.cache = {}\n        self.reference_counts = {}\n\n    def load_asset(self, path: str) -&gt; Any:\n        if path not in self.cache:\n            self.cache[path] = load_file(path)\n            self.reference_counts[path] = 0\n        self.reference_counts[path] += 1\n        return self.cache[path]\n\n    def unload_asset(self, path: str):\n        self.reference_counts[path] -= 1\n        if self.reference_counts[path] &lt;= 0:\n            del self.cache[path]\n            del self.reference_counts[path]\n</code></pre>"},{"location":"guides/performance/#physics-optimization","title":"Physics Optimization","text":""},{"location":"guides/performance/#spatial-partitioning","title":"Spatial Partitioning","text":"<pre><code>class Grid:\n    def __init__(self, cell_size: int):\n        self.cell_size = cell_size\n        self.cells = {}\n\n    def add_object(self, obj: GameObject):\n        cell_x = obj.x // self.cell_size\n        cell_y = obj.y // self.cell_size\n        if (cell_x, cell_y) not in self.cells:\n            self.cells[(cell_x, cell_y)] = set()\n        self.cells[(cell_x, cell_y)].add(obj)\n\n    def get_nearby(self, obj: GameObject) -&gt; Set[GameObject]:\n        cell_x = obj.x // self.cell_size\n        cell_y = obj.y // self.cell_size\n        nearby = set()\n        for dx in (-1, 0, 1):\n            for dy in (-1, 0, 1):\n                cell = (cell_x + dx, cell_y + dy)\n                if cell in self.cells:\n                    nearby.update(self.cells[cell])\n        return nearby\n</code></pre>"},{"location":"guides/performance/#collision-optimization","title":"Collision Optimization","text":"<pre><code>def check_collisions(objects: List[GameObject], grid: Grid):\n    for obj in objects:\n        # Only check nearby objects\n        nearby = grid.get_nearby(obj)\n        for other in nearby:\n            if obj != other and obj.collides_with(other):\n                handle_collision(obj, other)\n</code></pre>"},{"location":"guides/performance/#input-handling","title":"Input Handling","text":""},{"location":"guides/performance/#event-buffering","title":"Event Buffering","text":"<pre><code>class InputBuffer:\n    def __init__(self, buffer_time: float = 0.1):\n        self.buffer_time = buffer_time\n        self.buffer = []\n\n    def add_input(self, action: str, timestamp: float):\n        self.buffer.append((action, timestamp))\n        self.cleanup_old_inputs(timestamp)\n\n    def cleanup_old_inputs(self, current_time: float):\n        self.buffer = [(a, t) for a, t in self.buffer\n                      if current_time - t &lt;= self.buffer_time]\n\n    def has_input(self, action: str, current_time: float) -&gt; bool:\n        return any(a == action and current_time - t &lt;= self.buffer_time\n                  for a, t in self.buffer)\n</code></pre>"},{"location":"guides/performance/#audio-optimization","title":"Audio Optimization","text":""},{"location":"guides/performance/#sound-pooling","title":"Sound Pooling","text":"<pre><code>class SoundPool:\n    def __init__(self, sound_path: str, pool_size: int = 4):\n        self.sounds = [load_sound(sound_path) for _ in range(pool_size)]\n        self.current = 0\n\n    def play(self):\n        sound = self.sounds[self.current]\n        self.current = (self.current + 1) % len(self.sounds)\n        sound.play()\n</code></pre>"},{"location":"guides/performance/#scene-management","title":"Scene Management","text":""},{"location":"guides/performance/#loading-optimization","title":"Loading Optimization","text":"<pre><code>class Scene:\n    def __init__(self):\n        self.loaded = False\n        self.assets = set()\n\n    async def load(self):\n        if not self.loaded:\n            await self.preload_assets()\n            self.setup_scene()\n            self.loaded = True\n\n    def unload(self):\n        if self.loaded:\n            self.cleanup_assets()\n            self.loaded = False\n</code></pre>"},{"location":"guides/performance/#debugging-performance","title":"Debugging Performance","text":""},{"location":"guides/performance/#performance-logging","title":"Performance Logging","text":"<pre><code>class PerformanceLogger:\n    def __init__(self):\n        self.timings = {}\n        self.samples = 100\n\n    @contextmanager\n    def measure(self, name: str):\n        start = time.perf_counter()\n        yield\n        end = time.perf_counter()\n        if name not in self.timings:\n            self.timings[name] = []\n        self.timings[name].append(end - start)\n        if len(self.timings[name]) &gt; self.samples:\n            self.timings[name].pop(0)\n\n    def get_average(self, name: str) -&gt; float:\n        return sum(self.timings[name]) / len(self.timings[name])\n</code></pre>"},{"location":"guides/performance/#common-performance-issues","title":"Common Performance Issues","text":""},{"location":"guides/performance/#memory-leaks","title":"Memory Leaks","text":"<ul> <li>Event listeners not being removed</li> <li>Circular references between objects</li> <li>Cached assets not being cleared</li> <li>Texture memory not being freed</li> </ul>"},{"location":"guides/performance/#cpu-bottlenecks","title":"CPU Bottlenecks","text":"<ul> <li>Too many active physics objects</li> <li>Inefficient collision detection</li> <li>Complex particle systems</li> <li>Unoptimized rendering loops</li> </ul>"},{"location":"guides/performance/#gpu-bottlenecks","title":"GPU Bottlenecks","text":"<ul> <li>Too many draw calls</li> <li>Large textures</li> <li>Complex shaders</li> <li>Excessive screen effects</li> </ul>"},{"location":"guides/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and fix common issues when developing with the Retro Game Engine.</p>"},{"location":"guides/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"guides/troubleshooting/#poetry-installation","title":"Poetry Installation","text":"<p><pre><code>Error: Could not find a version that satisfies the requirement retro-game-engine\n</code></pre> - Check Python version (requires 3.9+) - Update Poetry to latest version - Clear Poetry cache: <code>poetry cache clear . --all</code></p>"},{"location":"guides/troubleshooting/#package-dependencies","title":"Package Dependencies","text":"<p><pre><code>Error: Dependency resolution failed\n</code></pre> - Update <code>pyproject.toml</code> with correct versions - Check for conflicting dependencies - Try <code>poetry update</code> to resolve conflicts</p>"},{"location":"guides/troubleshooting/#runtime-issues","title":"Runtime Issues","text":""},{"location":"guides/troubleshooting/#game-loop","title":"Game Loop","text":""},{"location":"guides/troubleshooting/#low-frame-rate","title":"Low Frame Rate","text":"<pre><code># Check performance metrics\nmetrics = game_loop.performance_metrics\nprint(f\"FPS: {metrics.fps}\")\nprint(f\"Frame Time: {metrics.frame_time}ms\")\nprint(f\"Update Time: {metrics.update_time}ms\")\nprint(f\"Render Time: {metrics.render_time}ms\")\n</code></pre> <p>Solutions: - Profile code for bottlenecks - Reduce number of active objects - Implement object pooling - Use sprite batching</p>"},{"location":"guides/troubleshooting/#fixed-update-issues","title":"Fixed Update Issues","text":"<pre><code># Common mistake: Variable time step physics\ndef update(dt):\n    player.x += velocity * dt  # Wrong for physics!\n\n# Correct: Fixed time step in physics update\ndef fixed_update(dt):\n    player.x += velocity * dt  # Correct\n</code></pre>"},{"location":"guides/troubleshooting/#rendering","title":"Rendering","text":""},{"location":"guides/troubleshooting/#sprite-issues","title":"Sprite Issues","text":"<pre><code># Debug sprite bounds\ndef render():\n    for sprite in sprites:\n        pygame.draw.rect(\n            surface,\n            (255, 0, 0),\n            sprite.get_bounds(),\n            1\n        )\n</code></pre> <p>Common Problems: - Incorrect sprite sheet coordinates - Missing texture references - Z-index conflicts - Transform issues</p>"},{"location":"guides/troubleshooting/#screen-tearing","title":"Screen Tearing","text":"<pre><code># Enable VSync\nwindow_config = WindowConfig(\n    title=\"My Game\",\n    width=800,\n    height=600,\n    vsync=True  # Important!\n)\n</code></pre>"},{"location":"guides/troubleshooting/#input","title":"Input","text":""},{"location":"guides/troubleshooting/#input-delay","title":"Input Delay","text":"<pre><code># Debug input timing\ndef update():\n    if input_manager.is_key_just_pressed(K_SPACE):\n        print(f\"Jump latency: {time.perf_counter() - last_frame_time}\")\n</code></pre> <p>Solutions: - Use <code>is_key_just_pressed</code> for immediate actions - Implement input buffering - Check for input every frame - Reduce processing in input handlers</p>"},{"location":"guides/troubleshooting/#input-not-registering","title":"Input Not Registering","text":"<pre><code># Common mistake: Not updating input state\ndef update():\n    if pygame.key.get_pressed()[K_SPACE]:  # Wrong!\n        player.jump()\n\n# Correct: Using input manager\ndef update():\n    input_manager.update()  # Important!\n    if input_manager.is_key_pressed(K_SPACE):\n        player.jump()\n</code></pre>"},{"location":"guides/troubleshooting/#physics","title":"Physics","text":""},{"location":"guides/troubleshooting/#collision-detection","title":"Collision Detection","text":"<pre><code># Debug collision boxes\ndef render():\n    for obj in physics_objects:\n        bounds = obj.get_collision_bounds()\n        pygame.draw.rect(surface, (0, 255, 0), bounds, 1)\n</code></pre> <p>Common Issues: - Objects passing through each other - Stuck in walls - Jittery movement - Missing collisions</p>"},{"location":"guides/troubleshooting/#physics-glitches","title":"Physics Glitches","text":"<pre><code># Check for extreme velocities\ndef update():\n    for obj in physics_objects:\n        if obj.velocity.magnitude() &gt; 1000:\n            print(f\"Warning: High velocity on {obj}\")\n</code></pre>"},{"location":"guides/troubleshooting/#memory","title":"Memory","text":""},{"location":"guides/troubleshooting/#memory-leaks","title":"Memory Leaks","text":"<pre><code># Track object counts\ndef debug_memory():\n    print(f\"Sprites: {len(sprite_renderer.sprites)}\")\n    print(f\"Physics Objects: {len(physics_world.objects)}\")\n    print(f\"Event Listeners: {len(event_manager.listeners)}\")\n</code></pre> <p>Solutions: - Remove unused sprites - Clear event listeners - Implement proper cleanup - Use weak references</p>"},{"location":"guides/troubleshooting/#resource-management","title":"Resource Management","text":"<pre><code># Debug asset loading\ndef load_scene():\n    print(f\"Before: {len(asset_manager.cache)}\")\n    scene.load()\n    print(f\"After: {len(asset_manager.cache)}\")\n</code></pre>"},{"location":"guides/troubleshooting/#audio","title":"Audio","text":""},{"location":"guides/troubleshooting/#sound-not-playing","title":"Sound Not Playing","text":"<pre><code># Check audio system state\ndef debug_audio():\n    print(f\"Mixer initialized: {pygame.mixer.get_init()}\")\n    print(f\"Sound volume: {audio_manager.sound_volume}\")\n    print(f\"Active channels: {pygame.mixer.get_num_busy()}\")\n</code></pre>"},{"location":"guides/troubleshooting/#audio-lag","title":"Audio Lag","text":"<pre><code># Monitor audio buffer\ndef update():\n    if pygame.mixer.get_busy():\n        print(f\"Queue size: {audio_manager.get_queue_size()}\")\n</code></pre>"},{"location":"guides/troubleshooting/#development-tools","title":"Development Tools","text":""},{"location":"guides/troubleshooting/#debugging-tools","title":"Debugging Tools","text":"<pre><code>class DebugInfo:\n    def __init__(self):\n        self.show_fps = True\n        self.show_collisions = True\n        self.show_sprites = True\n\n    def render(self, surface):\n        if self.show_fps:\n            render_fps()\n        if self.show_collisions:\n            render_collision_boxes()\n        if self.show_sprites:\n            render_sprite_bounds()\n</code></pre>"},{"location":"guides/troubleshooting/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code>class PerformanceMonitor:\n    def __init__(self):\n        self.frame_times = []\n        self.max_samples = 60\n\n    def update(self, dt):\n        self.frame_times.append(dt)\n        if len(self.frame_times) &gt; self.max_samples:\n            self.frame_times.pop(0)\n\n    def get_average_fps(self):\n        return 1.0 / (sum(self.frame_times) / len(self.frame_times))\n</code></pre>"},{"location":"guides/troubleshooting/#common-error-messages","title":"Common Error Messages","text":""},{"location":"guides/troubleshooting/#importerror","title":"ImportError","text":"<p><pre><code>ImportError: No module named 'retro_game_engine'\n</code></pre> - Check Python path - Verify installation - Check virtual environment</p>"},{"location":"guides/troubleshooting/#typeerror","title":"TypeError","text":"<p><pre><code>TypeError: 'NoneType' object is not subscriptable\n</code></pre> - Check for uninitialized objects - Verify asset loading - Debug object lifecycle</p>"},{"location":"guides/troubleshooting/#valueerror","title":"ValueError","text":"<p><pre><code>ValueError: Invalid sprite frame index\n</code></pre> - Verify sprite sheet configuration - Check animation sequences - Debug frame calculations</p>"},{"location":"guides/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"guides/troubleshooting/#debug-logging","title":"Debug Logging","text":"<pre><code>import logging\n\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(__name__)\n\nlogger.debug(\"Sprite loaded: %s\", sprite_path)\nlogger.warning(\"High frame time: %f\", frame_time)\nlogger.error(\"Failed to load asset: %s\", asset_path)\n</code></pre>"},{"location":"guides/troubleshooting/#support-resources","title":"Support Resources","text":"<ul> <li>Check documentation</li> <li>Search GitHub issues</li> <li>Join Discord community</li> <li>Post on forums</li> </ul>"},{"location":"guides/troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Include error messages</li> <li>Provide minimal example</li> <li>List system information</li> <li>Share relevant logs</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":"<p>Welcome to the Retro Game Engine tutorials! These guides will help you learn how to create games using our engine.</p>"},{"location":"tutorials/#available-tutorials","title":"Available Tutorials","text":""},{"location":"tutorials/#basic-game-development","title":"Basic Game Development","text":"<ol> <li>Platformer Game - Learn the basics through creating a simple platformer</li> </ol>"},{"location":"tutorials/#upcoming-tutorials","title":"Upcoming Tutorials","text":"<p>We are actively working on the following tutorials:</p>"},{"location":"tutorials/#getting-started-series","title":"Getting Started Series","text":"<ol> <li>Your First Game - Create a simple window and game loop</li> <li>Adding Sprites - Learn to work with sprites and animations</li> <li>Input Handling - Handle keyboard and gamepad input</li> <li>Collision Detection - Implement basic collision detection</li> <li>Sound and Music - Add audio to your game</li> </ol>"},{"location":"tutorials/#intermediate-topics","title":"Intermediate Topics","text":"<ol> <li>Scene Management - Manage different game states</li> <li>Tile Maps - Create scrolling tile-based levels</li> <li>UI Elements - Add menus and HUD elements</li> <li>Entity Component System - Work with the ECS architecture</li> <li>Game State - Save and load game progress</li> </ol>"},{"location":"tutorials/#advanced-topics","title":"Advanced Topics","text":"<ol> <li>Performance Optimization - Optimize your game</li> <li>Custom Shaders - Create visual effects</li> <li>Networking Basics - Add multiplayer capabilities</li> <li>Advanced Physics - Complex collision and movement</li> <li>AI Behaviors - Create intelligent game entities</li> </ol>"},{"location":"tutorials/#contributing","title":"Contributing","text":"<p>We welcome contributions to our tutorials! If you'd like to help:</p> <ol> <li>Check our GitHub Issues for tutorial requests</li> <li>Read our Contributing Guide</li> <li>Submit a PR with your tutorial</li> </ol>"},{"location":"tutorials/#tutorial-structure","title":"Tutorial Structure","text":"<p>Each tutorial includes: - Step-by-step instructions - Code examples - Common pitfalls and solutions - Exercises to practice concepts - Final project source code</p>"},{"location":"tutorials/#getting-help","title":"Getting Help","text":"<p>If you get stuck: 1. Check our FAQ 2. Ask in our GitHub Discussions 3. Report issues in our Issue Tracker</p>"},{"location":"tutorials/platformer/","title":"Building a Simple Platformer","text":"<p>In this tutorial, we'll create a basic platformer game using Retro Game Engine. You'll learn how to: - Set up a game scene - Create a player character with physics - Handle keyboard input - Add platforms and collision detection</p>"},{"location":"tutorials/platformer/#project-setup","title":"Project Setup","text":"<ol> <li> <p>Create a new directory for your project: <pre><code>mkdir platformer-game\ncd platformer-game\n</code></pre></p> </li> <li> <p>Create the following file structure: <pre><code>platformer-game/\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 player.png\n\u2502   \u2514\u2500\u2500 platform.png\n\u2514\u2500\u2500 main.py\n</code></pre></p> </li> <li> <p>Add simple placeholder images for the player (32x32 pixels) and platform (64x16 pixels).</p> </li> </ol>"},{"location":"tutorials/platformer/#basic-game-structure","title":"Basic Game Structure","text":"<p>Create <code>main.py</code> with the following code:</p> <pre><code>from retro_game_engine import GameLoop, Scene, Sprite\nfrom retro_game_engine.core.input import Input\nfrom retro_game_engine.core.physics import Physics\n\nclass Player:\n    def __init__(self, x: float, y: float):\n        self.sprite = Sprite(\"assets/player.png\")\n        self.sprite.config.x = x\n        self.sprite.config.y = y\n        self.velocity_x = 0\n        self.velocity_y = 0\n        self.on_ground = False\n\n    def update(self, delta_time: float):\n        # Apply gravity\n        if not self.on_ground:\n            self.velocity_y += 800 * delta_time  # Gravity\n\n        # Move player\n        self.sprite.config.x += self.velocity_x * delta_time\n        self.sprite.config.y += self.velocity_y * delta_time\n\n    def draw(self, surface):\n        self.sprite.draw(surface)\n\nclass Platform:\n    def __init__(self, x: float, y: float):\n        self.sprite = Sprite(\"assets/platform.png\")\n        self.sprite.config.x = x\n        self.sprite.config.y = y\n\n    def draw(self, surface):\n        self.sprite.draw(surface)\n\nclass GameScene(Scene):\n    def __init__(self):\n        super().__init__()\n        # Create player\n        self.player = Player(400, 300)\n\n        # Create platforms\n        self.platforms = [\n            Platform(400, 500),  # Ground\n            Platform(300, 400),  # Platform 1\n            Platform(500, 400),  # Platform 2\n        ]\n\n    def update(self, delta_time: float):\n        # Handle input\n        if Input.is_key_pressed(pygame.K_LEFT):\n            self.player.velocity_x = -300\n        elif Input.is_key_pressed(pygame.K_RIGHT):\n            self.player.velocity_x = 300\n        else:\n            self.player.velocity_x = 0\n\n        # Jump when on ground\n        if Input.is_key_pressed(pygame.K_SPACE) and self.player.on_ground:\n            self.player.velocity_y = -500\n            self.player.on_ground = False\n\n        # Update player\n        self.player.update(delta_time)\n\n        # Check collisions\n        self.player.on_ground = False\n        for platform in self.platforms:\n            if self._check_collision(self.player.sprite, platform.sprite):\n                self._resolve_collision(self.player, platform)\n\n    def draw(self, surface):\n        # Draw platforms\n        for platform in self.platforms:\n            platform.draw(surface)\n\n        # Draw player\n        self.player.draw(surface)\n\n    def _check_collision(self, sprite1: Sprite, sprite2: Sprite) -&gt; bool:\n        # Simple AABB collision\n        r1 = sprite1.get_rect()\n        r2 = sprite2.get_rect()\n        return (r1.left &lt; r2.right and\n                r1.right &gt; r2.left and\n                r1.top &lt; r2.bottom and\n                r1.bottom &gt; r2.top)\n\n    def _resolve_collision(self, player: Player, platform: Platform):\n        # Get rectangles\n        player_rect = player.sprite.get_rect()\n        platform_rect = platform.sprite.get_rect()\n\n        # Calculate overlap\n        dx = (player_rect.centerx - platform_rect.centerx)\n        dy = (player_rect.centery - platform_rect.centery)\n\n        # Resolve collision\n        if abs(dx) &gt; abs(dy):\n            # Horizontal collision\n            if dx &gt; 0:\n                player.sprite.config.x = platform_rect.right\n            else:\n                player.sprite.config.x = platform_rect.left - player_rect.width\n            player.velocity_x = 0\n        else:\n            # Vertical collision\n            if dy &gt; 0:\n                player.sprite.config.y = platform_rect.bottom\n                player.velocity_y = 0\n            else:\n                player.sprite.config.y = platform_rect.top - player_rect.height\n                player.velocity_y = 0\n                player.on_ground = True\n\ndef main():\n    game = GameLoop()\n    game.window_title = \"Platformer Game\"\n    game.window_width = 800\n    game.window_height = 600\n    game.current_scene = GameScene()\n    game.run()\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"tutorials/platformer/#understanding-the-code","title":"Understanding the Code","text":""},{"location":"tutorials/platformer/#player-class","title":"Player Class","text":"<p>The <code>Player</code> class manages the player character: - Stores position and velocity - Handles gravity - Tracks ground contact</p>"},{"location":"tutorials/platformer/#platform-class","title":"Platform Class","text":"<p>Simple class for platform objects: - Stores position - Renders platform sprite</p>"},{"location":"tutorials/platformer/#gamescene-class","title":"GameScene Class","text":"<p>Main game scene that: - Creates player and platforms - Handles input - Updates game logic - Manages collisions - Renders game objects</p>"},{"location":"tutorials/platformer/#collision-system","title":"Collision System","text":"<p>The collision system uses two main methods: - <code>_check_collision</code>: Detects overlapping sprites - <code>_resolve_collision</code>: Pushes objects apart and updates physics</p>"},{"location":"tutorials/platformer/#running-the-game","title":"Running the Game","text":"<p>Run your game with: <pre><code>python main.py\n</code></pre></p> <p>Use the arrow keys to move and space to jump!</p>"},{"location":"tutorials/platformer/#next-steps","title":"Next Steps","text":"<p>Try these enhancements: 1. Add double jumping 2. Create moving platforms 3. Add collectible items 4. Implement a level system 5. Add sound effects</p>"},{"location":"tutorials/platformer/#common-issues","title":"Common Issues","text":""},{"location":"tutorials/platformer/#player-gets-stuck-in-platforms","title":"Player gets stuck in platforms","text":"<ul> <li>Check collision resolution order</li> <li>Ensure proper collision response</li> <li>Add debug visualization</li> </ul>"},{"location":"tutorials/platformer/#jumping-feels-wrong","title":"Jumping feels wrong","text":"<ul> <li>Adjust gravity and jump velocity</li> <li>Add variable jump height</li> <li>Implement coyote time</li> </ul>"},{"location":"tutorials/platformer/#movement-feels-stiff","title":"Movement feels stiff","text":"<ul> <li>Add acceleration/deceleration</li> <li>Implement air control</li> <li>Add animation</li> </ul>"},{"location":"tutorials/platformer/#complete-example","title":"Complete Example","text":"<p>You can find the complete example with additional features in the examples/platformer directory.</p>"},{"location":"tutorials/platformer/#resources","title":"Resources","text":"<ul> <li>Physics Tutorial</li> <li>Animation Guide</li> <li>Input Handling</li> <li>Game Design Tips</li> </ul>"}]}